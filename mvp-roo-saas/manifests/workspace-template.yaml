apiVersion: v1
kind: Namespace
metadata:
  name: ${NAMESPACE}
  labels:
    roo: "true"
    created-by: "roo-saas"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vscode-server
  namespace: ${NAMESPACE}
  labels:
    app: vscode-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vscode-server
  template:
    metadata:
      labels:
        app: vscode-server
    spec:
      serviceAccountName: workspace-deployer
      containers:
      - name: vscode-server
        image: gitpod/openvscode-server:latest
        ports:
        - containerPort: 3000
        env:
        - name: OPENVSCODE_SERVER_ROOT
          value: "/home/workspace"
        - name: ALLOWED_EXTENSIONS
          value: "roo-code"
        - name: KUBECONFIG
          value: "/home/.kube/config"
        command:
        - /bin/bash
        - -c
        - |
          # Create .kube directory
          mkdir -p /home/.kube

          # Setup kubeconfig using service account token
          echo "üîß Setting up kubeconfig..."
          KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          KUBE_CA_CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          KUBE_NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

          # Create kubeconfig
          cat > /home/.kube/config << EOF
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority: ${KUBE_CA_CERT}
              server: https://kubernetes.default.svc.cluster.local
            name: default-cluster
          contexts:
          - context:
              cluster: default-cluster
              namespace: ${KUBE_NAMESPACE}
              user: default-user
            name: default-context
          current-context: default-context
          users:
          - name: default-user
            user:
              token: ${KUBE_TOKEN}
          EOF

          chmod 600 /home/.kube/config
          echo "‚úÖ kubeconfig created successfully"

          # Install kubectl
          echo "üì¶ Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
          chmod +x kubectl && \
          sudo mv kubectl /usr/local/bin/ && \
          echo "‚úÖ kubectl installed successfully" || \
          echo "‚ö†Ô∏è  Could not install kubectl"

          # Install skaffold
          echo "üì¶ Installing skaffold..."
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
          chmod +x skaffold && \
          sudo mv skaffold /usr/local/bin/ && \
          echo "‚úÖ skaffold installed successfully" || \
          echo "‚ö†Ô∏è  Could not install skaffold"

          # Install Node.js for MCP server
          echo "üì¶ Installing Node.js..."
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && \
          sudo apt-get install -y nodejs && \
          echo "‚úÖ Node.js installed successfully" || \
          echo "‚ö†Ô∏è  Could not install Node.js"

          # Copy MCP server content from mounted volume
          echo "üì¶ Setting up MCP server workspace from template..."
          if [ -d "/workspace-template" ]; then
            echo "üìã Copying MCP server files from template..."

            # Copy MCP server implementation
            if [ -d "/workspace-template/.mcp-servers" ]; then
              cp -r /workspace-template/.mcp-servers /home/workspace/
              echo "‚úÖ Copied MCP server files"
            else
              echo "‚ö†Ô∏è  MCP server template not found, creating basic structure..."
              mkdir -p /home/workspace/.mcp-servers/workspace-deployment/src
              mkdir -p /home/workspace/.mcp-servers/workspace-deployment/templates/configmap-static/k8s
            fi

            # Copy VSCode settings
            if [ -f "/workspace-template/.vscode-server/settings.json" ]; then
              mkdir -p /home/workspace/.vscode-server
              cp /workspace-template/.vscode-server/settings.json /home/workspace/.vscode-server/
              echo "‚úÖ Copied VSCode settings"
            else
              echo "‚ö†Ô∏è  VSCode settings template not found, creating basic settings..."
              mkdir -p /home/workspace/.vscode-server
              echo '{"mcp.servers":{"workspace-deployment":{"command":"node","args":["/home/workspace/.mcp-servers/workspace-deployment/dist/index.js"],"env":{"WORKSPACE_ROOT":"/home/workspace"}}}}' > /home/workspace/.vscode-server/settings.json
            fi

            # Setup Cline MCP configuration
            echo "üîß Configuring Cline MCP settings..."
            MCP_SETTINGS_DIR="/home/workspace/.openvscode-server/data/User/globalStorage/rooveterinaryinc.roo-cline/settings"
            mkdir -p "$MCP_SETTINGS_DIR"

            # Create MCP settings JSON file
            echo '{' > "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo '  "mcpServers": {' >> "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo '    "workspace-deployment": {' >> "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo '      "command": "node",' >> "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo '      "args": ["/home/workspace/.mcp-servers/workspace-deployment/dist/index.js"],' >> "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo '      "env": {' >> "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo '        "WORKSPACE_ROOT": "/home/workspace"' >> "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo '      }' >> "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo '    }' >> "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo '  }' >> "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo '}' >> "$MCP_SETTINGS_DIR/mcp_settings.json"
            echo "‚úÖ Cline MCP settings configured"

            # Copy sample projects
            if [ -d "/workspace-template/projects" ]; then
              cp -r /workspace-template/projects /home/workspace/
              echo "‚úÖ Copied sample projects"
            else
              echo "‚ö†Ô∏è  Sample projects not found, creating basic structure..."
              mkdir -p /home/workspace/projects
            fi

            # Copy setup script
            if [ -f "/workspace-template/setup-mcp-server.sh" ]; then
              cp /workspace-template/setup-mcp-server.sh /home/workspace/
              chmod +x /home/workspace/setup-mcp-server.sh
              echo "‚úÖ Copied setup script"
            fi

            # Install MCP server dependencies if package.json exists
            if [ -f "/home/workspace/.mcp-servers/workspace-deployment/package.json" ]; then
              echo "üì¶ Installing MCP server dependencies..."
              cd /home/workspace/.mcp-servers/workspace-deployment
              npm install --silent
              echo "‚úÖ MCP server dependencies installed"

              # Build MCP server if TypeScript source exists
              if [ -f "/home/workspace/.mcp-servers/workspace-deployment/src/index.ts" ]; then
                echo "üî® Building MCP server..."
                npm run build
                echo "‚úÖ MCP server built successfully"
              fi

              cd /
            fi

          else
            echo "‚ö†Ô∏è  Workspace template volume not mounted, creating minimal structure..."
            mkdir -p /home/workspace/.mcp-servers/workspace-deployment
            mkdir -p /home/workspace/.vscode-server
            mkdir -p /home/workspace/projects
          fi

          # Verify installations and permissions
          echo "üîç Verifying installations and permissions..."
          kubectl version --client || echo "kubectl not available"
          skaffold version || echo "skaffold not available"
          node --version || echo "Node.js not available"
          npm --version || echo "npm not available"

          # Test kubectl access
          echo "üîç Testing kubectl access..."
          kubectl get pods -n ${KUBE_NAMESPACE} || echo "kubectl access test failed"
          kubectl auth can-i create deployments -n ${KUBE_NAMESPACE} || echo "Cannot create deployments"
          kubectl auth can-i create services -n ${KUBE_NAMESPACE} || echo "Cannot create services"

          # Download and install Roo Code extension
          echo "üì¶ Installing Roo Code extension..."
          curl -L -o /tmp/roo-code.vsix "https://github.com/RooCodeInc/Roo-Code/releases/download/v3.19.3/roo-cline-3.19.3.vsix" || \
          echo "‚ö†Ô∏è  Could not download Roo Code extension, continuing without it..."

          # Install extension if downloaded
          if [ -f /tmp/roo-code.vsix ]; then
            echo "Installing Roo Code extension..."
            /home/.openvscode-server/bin/openvscode-server \
              --install-extension /tmp/roo-code.vsix \
              --force
            echo "Extension installed successfully"
          fi

          # Start OpenVSCode Server
          echo "Starting OpenVSCode Server..."
          /home/.openvscode-server/bin/openvscode-server \
            --host 0.0.0.0 \
            --port 3000 \
            --without-connection-token \
            --accept-server-license-terms \
            --connection-secret-file /dev/null \
            --server-base-path /${NAMESPACE}
        volumeMounts:
        - name: workspace
          mountPath: /home/workspace
        - name: workspace-template
          mountPath: /workspace-template
          readOnly: true
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 60  # Increased to allow time for tool installation
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30  # Increased to allow time for tool installation
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        securityContext:
          runAsUser: 0  # Run as root to allow sudo commands
      volumes:
      - name: workspace
        emptyDir: {}
      - name: workspace-template
        hostPath:
          path: /opt/workspace-template
          type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: vscode-server
  namespace: ${NAMESPACE}
  labels:
    app: vscode-server
spec:
  selector:
    app: vscode-server
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vscode-server
  namespace: ${NAMESPACE}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    app: vscode-server
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /${NAMESPACE}(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: vscode-server
            port:
              number: 80
